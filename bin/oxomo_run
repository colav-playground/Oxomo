#!/usr/bin/env python3
from oxomo.checkpoint import OxomoCheckPoint
from oxomo.harvester import OxomoHarvester

import psutil
import json
import sys
import argparse
import faulthandler
faulthandler.enable()

parser = argparse.ArgumentParser(description='Oxomo Harvester')
parser.add_argument('--max_threads', type=int, default=-1,
                    help='an integer for number of threads, default -1 meaning all available')
parser.add_argument('--mongo_dburi', type=str,
                    default='mongodb://localhost:27017/', help='uri for MongoDb database')
parser.add_argument('--mongo_dbname', type=str,
                    default="oxomo", help='MongoDb name to save the data.')
parser.add_argument('--config', type=str,required=True, help='json config file, take a look in the README for more information.')
parser.add_argument('--drop_mongodb', action='store_true',
                    help='delete the database, use it with carefull, deletes everything!')
parser.add_argument('--checkpoint', action='store_true',
                    help='create a checkpoint, if it already exists then perform incremental checkpoint')

def check_endpoints(endpoints):
    """
    Allows to check the json config file is well defined.
    """
    for i in endpoints.keys():
        if "url" not in endpoints[i].keys():
            print(f"ERROR: bad config file, 'url' field not found for {i}")
            return False
        if "metadataPrefix" not in endpoints[i].keys():
            print(f"ERROR: bad config file, 'metadataPrefix' field not found for {i}")
            return False
        if "rate_limit" in endpoints[i].keys():
            if "calls" not in endpoints[i]["rate_limit"].keys():
                print(f"ERROR: bad config file, 'calls' field not found for 'rate_limit' in the endpoint {i}")
                return False
            if "secs" not in endpoints[i]["rate_limit"].keys():
                print(f"ERROR: bad config file, 'secs' field not found for 'rate_limit' in the endpoint {i}")
                return False
    return True

if __name__ == '__main__':
    args = parser.parse_args()
    max_threads = args.max_threads
    if max_threads is -1:
        max_threads = psutil.cpu_count()
    config_file = args.config
    with open(config_file) as f:
        endpoints = json.load(f)
    if check_endpoints(endpoints) == False:
        print(f"ERROR: config file {config_file} error, fix the configuration to continue, please take a look in the README.md to get some help.")
        print(f"ERROR: aborting execution")
        sys.exit(1)
    if args.checkpoint:
        ckp = OxomoCheckPoint(mongodb_uri=args.mongo_dburi)
        ckp.run(endpoints,args.mongo_dbname,max_threads)
    harvester = OxomoHarvester(endpoints,args.mongo_dbname,args.mongo_dburi)
    harvester.run(max_threads)